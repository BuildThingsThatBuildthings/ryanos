/**\n * Tests for LLM-based workout generation system\n * @file workout-generator.test.js\n */\n\nconst { WorkoutGenerationService } = require('../../src/llm/workout-generator');\nconst { WorkoutValidator } = require('../../src/llm/validation');\nconst { LLMTools } = require('../../src/llm/llm-tools');\nconst { ExerciseSuggestionSystem } = require('../../src/llm/suggestion-system');\n\n// Mock database\nconst mockDb = {\n  transaction: jest.fn(() => ({\n    commit: jest.fn(),\n    rollback: jest.fn(),\n    insert: jest.fn().mockReturnValue([{ id: 'test-id' }]),\n    update: jest.fn(),\n    where: jest.fn().mockReturnThis(),\n    select: jest.fn().mockReturnThis(),\n    first: jest.fn(),\n    returning: jest.fn().mockReturnValue(['test-id'])\n  })),\n  insert: jest.fn().mockReturnValue([{ id: 'test-id' }]),\n  where: jest.fn().mockReturnThis(),\n  select: jest.fn().mockReturnThis(),\n  leftJoin: jest.fn().mockReturnThis(),\n  orderBy: jest.fn().mockReturnThis(),\n  limit: jest.fn().mockReturnThis(),\n  first: jest.fn(),\n  raw: jest.fn()\n};\n\n// Mock OpenAI\njest.mock('openai', () => {\n  return jest.fn().mockImplementation(() => ({\n    chat: {\n      completions: {\n        create: jest.fn().mockResolvedValue({\n          choices: [{\n            message: {\n              content: JSON.stringify({\n                workout_plan: mockWorkoutPlan,\n                rationale: 'Test rationale',\n                confidence_score: 0.85\n              })\n            }\n          }],\n          usage: {\n            prompt_tokens: 500,\n            completion_tokens: 300,\n            total_tokens: 800\n          }\n        })\n      }\n    }\n  }));\n});\n\n// Mock workout plan\nconst mockWorkoutPlan = {\n  id: 'workout-123',\n  name: 'Upper Body Strength',\n  description: 'Focused upper body strength training',\n  blocks: [\n    {\n      type: 'warmup',\n      name: 'Dynamic Warmup',\n      exercises: [\n        {\n          exercise_id: 'ex-1',\n          exercise_name: 'Arm Circles',\n          order: 1,\n          sets: [\n            { set_number: 1, reps: 10, weight: 0, rest_seconds: 30, rpe: 4 }\n          ],\n          rest_between_exercises: 60\n        }\n      ],\n      time_cap_minutes: 10\n    },\n    {\n      type: 'strength',\n      name: 'Main Strength Block',\n      exercises: [\n        {\n          exercise_id: 'ex-2',\n          exercise_name: 'Bench Press',\n          order: 1,\n          sets: [\n            { set_number: 1, reps: 8, weight: 100, rest_seconds: 180, rpe: 7 },\n            { set_number: 2, reps: 8, weight: 100, rest_seconds: 180, rpe: 8 },\n            { set_number: 3, reps: 8, weight: 100, rest_seconds: 180, rpe: 8 }\n          ],\n          rest_between_exercises: 120\n        }\n      ],\n      time_cap_minutes: 30\n    }\n  ],\n  estimated_duration: 60,\n  workout_type: 'strength',\n  focus: 'upper_body',\n  overall_rpe_target: 7.5,\n  equipment_required: ['barbell', 'bench'],\n  rationale: 'Balanced upper body strength development',\n  safety_notes: ['Proper form on bench press', 'Adequate warmup']\n};\n\n// Mock exercise library\nconst mockExerciseLibrary = {\n  total_exercises: 50,\n  exercises: [\n    {\n      id: 'ex-1',\n      name: 'Arm Circles',\n      category: 'warmup',\n      muscle_groups: ['shoulders'],\n      equipment_needed: [],\n      is_active: true\n    },\n    {\n      id: 'ex-2',\n      name: 'Bench Press',\n      category: 'strength',\n      muscle_groups: ['chest', 'triceps'],\n      equipment_needed: ['barbell', 'bench'],\n      is_active: true\n    }\n  ]\n};\n\n// Mock training history\nconst mockTrainingHistory = [\n  {\n    date: '2024-01-15',\n    workout_id: 'w1',\n    focus: 'upper_body',\n    workout_type: 'strength',\n    overall_rpe: 7.0,\n    total_volume_kg: 2500,\n    duration_minutes: 55\n  },\n  {\n    date: '2024-01-13',\n    workout_id: 'w2',\n    focus: 'lower_body',\n    workout_type: 'strength',\n    overall_rpe: 8.0,\n    total_volume_kg: 3200,\n    duration_minutes: 65\n  }\n];\n\ndescribe('WorkoutGenerationService', () => {\n  let service;\n  let mockTools;\n\n  beforeEach(() => {\n    // Set up environment\n    process.env.OPENAI_API_KEY = 'test-key';\n    \n    service = new WorkoutGenerationService(mockDb, {\n      model: 'gpt-4-turbo',\n      temperature: 0.1\n    });\n    \n    // Mock tools responses\n    mockTools = {\n      get_exercise_library: jest.fn().mockResolvedValue(mockExerciseLibrary),\n      get_summary_7d: jest.fn().mockResolvedValue({\n        total_workouts: 2,\n        average_rpe: 7.5,\n        recovery_status: 'normal'\n      }),\n      get_summary_14d: jest.fn().mockResolvedValue({\n        total_workouts: 4,\n        average_rpe: 7.2\n      }),\n      get_equipment_available: jest.fn().mockResolvedValue({\n        available_equipment: ['barbell', 'dumbbells', 'bench']\n      }),\n      get_user_constraints: jest.fn().mockResolvedValue({\n        max_workout_duration: 90,\n        fitness_level: 'intermediate',\n        excluded_exercises: []\n      }),\n      create_workout_plan: jest.fn().mockResolvedValue({\n        success: true,\n        workout_id: 'workout-123'\n      })\n    };\n    \n    service.tools = mockTools;\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('generateWorkout', () => {\n    test('should generate valid workout with library exercises only', async () => {\n      const result = await service.generateWorkout(\n        'user-123',\n        'Create an upper body strength workout'\n      );\n\n      expect(result.success).toBe(true);\n      expect(result.workout_plan).toBeDefined();\n      expect(result.workout_plan.blocks).toHaveLength(2);\n      expect(result.validation_result.is_valid).toBe(true);\n    });\n\n    test('should validate all exercises exist in user library', async () => {\n      // Mock workout with exercise not in library\n      const invalidWorkoutPlan = {\n        ...mockWorkoutPlan,\n        blocks: [\n          {\n            type: 'strength',\n            name: 'Main Block',\n            exercises: [\n              {\n                exercise_id: 'invalid-ex',\n                exercise_name: 'Unknown Exercise',\n                order: 1,\n                sets: [{ set_number: 1, reps: 10, weight: 50, rest_seconds: 60, rpe: 7 }],\n                rest_between_exercises: 60\n              }\n            ],\n            time_cap_minutes: 20\n          }\n        ]\n      };\n\n      // Mock LLM to return invalid workout\n      service.openai.chat.completions.create.mockResolvedValueOnce({\n        choices: [{\n          message: {\n            content: JSON.stringify({\n              workout_plan: invalidWorkoutPlan,\n              rationale: 'Test'\n            })\n          }\n        }],\n        usage: { prompt_tokens: 100, completion_tokens: 50, total_tokens: 150 }\n      });\n\n      const result = await service.generateWorkout(\n        'user-123',\n        'Create a workout with invalid exercises'\n      );\n\n      expect(result.success).toBe(false);\n      expect(result.validation_errors).toContain(\n        expect.stringContaining('Unknown Exercise')\n      );\n    });\n\n    test('should respect safety rules and progression limits', async () => {\n      // Mock high recent training load\n      mockTools.get_summary_7d.mockResolvedValueOnce({\n        total_workouts: 6,\n        average_rpe: 9.0,\n        recovery_status: 'needs_deload'\n      });\n\n      const result = await service.generateWorkout(\n        'user-123',\n        'Create a high-intensity workout'\n      );\n\n      // Should either fail or suggest deload\n      if (result.success) {\n        expect(result.workout_plan.overall_rpe_target).toBeLessThan(8);\n      } else {\n        expect(result.error).toContain('feasible');\n      }\n    });\n\n    test('should handle equipment constraints', async () => {\n      mockTools.get_equipment_available.mockResolvedValueOnce({\n        available_equipment: ['bodyweight']\n      });\n\n      const result = await service.generateWorkout(\n        'user-123',\n        'Create a bodyweight workout'\n      );\n\n      if (result.success) {\n        expect(result.workout_plan.equipment_required).not.toContain('barbell');\n      }\n    });\n\n    test('should create exercise suggestions for missing exercises', async () => {\n      const workoutWithSuggestions = {\n        ...mockWorkoutPlan,\n        blocks: [\n          {\n            type: 'strength',\n            name: 'Main Block',\n            exercises: [\n              {\n                exercise_id: 'new-ex',\n                exercise_name: 'New Exercise',\n                order: 1,\n                sets: [{ set_number: 1, reps: 10, weight: 50, rest_seconds: 60, rpe: 7 }],\n                rest_between_exercises: 60\n              }\n            ],\n            time_cap_minutes: 20\n          }\n        ]\n      };\n\n      service.openai.chat.completions.create.mockResolvedValueOnce({\n        choices: [{\n          message: {\n            content: JSON.stringify({\n              workout_plan: workoutWithSuggestions,\n              rationale: 'Test'\n            })\n          }\n        }],\n        usage: { prompt_tokens: 100, completion_tokens: 50, total_tokens: 150 }\n      });\n\n      const result = await service.generateWorkout(\n        'user-123',\n        'Create a workout'\n      );\n\n      expect(result.success).toBe(false);\n      expect(result.exercise_suggestions).toBeDefined();\n      expect(result.exercise_suggestions.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('feasibility checking', () => {\n    test('should detect insufficient exercise library', async () => {\n      mockTools.get_exercise_library.mockResolvedValueOnce({\n        total_exercises: 5,\n        exercises: []\n      });\n\n      const result = await service.generateWorkout(\n        'user-123',\n        'Create a comprehensive workout'\n      );\n\n      expect(result.success).toBe(false);\n      expect(result.details).toContain('Insufficient exercise library');\n    });\n\n    test('should detect missing equipment', async () => {\n      mockTools.get_equipment_available.mockResolvedValueOnce({\n        available_equipment: ['bodyweight']\n      });\n\n      const result = await service.generateWorkout(\n        'user-123',\n        'Create a barbell workout'\n      );\n\n      expect(result.success).toBe(false);\n      expect(result.details).toContain('Missing required equipment');\n    });\n  });\n});\n\ndescribe('WorkoutValidator', () => {\n  let validator;\n\n  beforeEach(() => {\n    validator = new WorkoutValidator();\n  });\n\n  describe('validateWorkoutPlan', () => {\n    test('should validate schema correctly', () => {\n      const result = validator.validateWorkoutPlan(\n        mockWorkoutPlan,\n        mockExerciseLibrary.exercises\n      );\n\n      expect(result.is_valid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    test('should detect exercises not in library', () => {\n      const workoutWithInvalidExercise = {\n        ...mockWorkoutPlan,\n        blocks: [\n          {\n            type: 'strength',\n            name: 'Test Block',\n            exercises: [\n              {\n                exercise_id: 'invalid-id',\n                exercise_name: 'Invalid Exercise',\n                order: 1,\n                sets: [{ set_number: 1, reps: 10, weight: 50, rest_seconds: 60, rpe: 7 }],\n                rest_between_exercises: 60\n              }\n            ],\n            time_cap_minutes: 20\n          }\n        ]\n      };\n\n      const result = validator.validateWorkoutPlan(\n        workoutWithInvalidExercise,\n        mockExerciseLibrary.exercises\n      );\n\n      expect(result.is_valid).toBe(false);\n      expect(result.errors.some(err => err.includes('Invalid Exercise'))).toBe(true);\n    });\n\n    test('should validate progression limits', () => {\n      const result = validator.validateProgression(\n        mockWorkoutPlan,\n        mockTrainingHistory\n      );\n\n      expect(result.warnings).toBeDefined();\n    });\n\n    test('should validate safety rules', () => {\n      const result = validator.validateSafetyRules(\n        mockWorkoutPlan,\n        mockTrainingHistory\n      );\n\n      expect(result.errors).toBeDefined();\n      expect(result.warnings).toBeDefined();\n    });\n  });\n});\n\ndescribe('ExerciseSuggestionSystem', () => {\n  let suggestionSystem;\n\n  beforeEach(() => {\n    suggestionSystem = new ExerciseSuggestionSystem(mockDb);\n  });\n\n  describe('processSuggestions', () => {\n    test('should auto-approve basic bodyweight exercises', async () => {\n      const suggestions = [\n        {\n          suggested_name: 'Push-up',\n          reason: 'Basic upper body exercise',\n          muscle_groups: ['chest', 'triceps'],\n          equipment_needed: [],\n          category: 'strength'\n        }\n      ];\n\n      // Mock database calls\n      mockDb.select = jest.fn().mockReturnThis();\n      mockDb.where = jest.fn().mockReturnThis();\n      mockDb.first = jest.fn().mockResolvedValue(null); // Exercise doesn't exist\n      \n      const result = await suggestionSystem.processSuggestions('user-123', suggestions);\n\n      expect(result.auto_approved).toHaveLength(1);\n      expect(result.auto_approved[0].suggested_name).toBe('Push-up');\n    });\n\n    test('should detect exercise variations', async () => {\n      const existingExercises = [\n        { name: 'Bench Press', id: 'ex-1' }\n      ];\n      \n      const isVariation = suggestionSystem.checkForVariation(\n        'incline bench press',\n        existingExercises\n      );\n\n      expect(isVariation.is_variation).toBe(true);\n      expect(isVariation.base_exercise).toBe('Bench Press');\n    });\n\n    test('should create pending suggestions for complex exercises', async () => {\n      const suggestions = [\n        {\n          suggested_name: 'Complex Olympic Lift',\n          reason: 'Advanced power development',\n          muscle_groups: ['full_body'],\n          equipment_needed: ['barbell', 'platform'],\n          category: 'power'\n        }\n      ];\n\n      mockDb.select = jest.fn().mockReturnThis();\n      mockDb.where = jest.fn().mockReturnThis();\n      mockDb.first = jest.fn().mockResolvedValue(null);\n      \n      const result = await suggestionSystem.processSuggestions('user-123', suggestions);\n\n      expect(result.pending_approval).toHaveLength(1);\n      expect(result.auto_approved).toHaveLength(0);\n    });\n  });\n});\n\ndescribe('Integration Tests', () => {\n  test('should handle complete workout generation workflow', async () => {\n    process.env.OPENAI_API_KEY = 'test-key';\n    \n    const service = new WorkoutGenerationService(mockDb);\n    service.tools = {\n      get_exercise_library: jest.fn().mockResolvedValue(mockExerciseLibrary),\n      get_summary_7d: jest.fn().mockResolvedValue({\n        total_workouts: 2,\n        average_rpe: 7.0,\n        recovery_status: 'normal'\n      }),\n      get_summary_14d: jest.fn().mockResolvedValue({\n        total_workouts: 4,\n        average_rpe: 7.2\n      }),\n      get_equipment_available: jest.fn().mockResolvedValue({\n        available_equipment: ['barbell', 'bench']\n      }),\n      get_user_constraints: jest.fn().mockResolvedValue({\n        max_workout_duration: 60,\n        fitness_level: 'intermediate',\n        excluded_exercises: []\n      }),\n      create_workout_plan: jest.fn().mockResolvedValue({\n        success: true,\n        workout_id: 'workout-123'\n      }),\n      log_exercise_suggestion: jest.fn().mockResolvedValue({ success: true })\n    };\n\n    const result = await service.generateWorkout(\n      'user-123',\n      'Create a 45-minute upper body strength workout using barbell exercises'\n    );\n\n    expect(result).toBeDefined();\n    expect(typeof result.success).toBe('boolean');\n    \n    if (result.success) {\n      expect(result.workout_plan).toBeDefined();\n      expect(result.workout_id).toBeDefined();\n    } else {\n      expect(result.error).toBeDefined();\n    }\n  });\n});\n\n// Test data cleanup\nafterAll(() => {\n  delete process.env.OPENAI_API_KEY;\n});"