version: '3.8'

services:

  # Backend API - Production Configuration
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: fitness-tracker-backend-prod
    environment:
      NODE_ENV: production
      PORT: 3000
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      CORS_ORIGIN: ${FRONTEND_URL}
      RATE_LIMIT_WINDOW: 900000
      RATE_LIMIT_MAX: 100
      LOG_LEVEL: info
      BCRYPT_ROUNDS: 12
      SESSION_SECRET: ${SESSION_SECRET}
    volumes:
      - backend_prod_logs:/app/logs:rw
    networks:
      - fitness-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: fitness-tracker-nginx-prod
    volumes:
      - ./src/deployment/docker/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./src/deployment/docker/ssl:/etc/nginx/ssl:ro
      - nginx_prod_logs:/var/log/nginx:rw
      - ./dist:/usr/share/nginx/html:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - fitness-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: fitness-tracker-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./src/deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - fitness-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: fitness-tracker-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./src/deployment/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3003:3000"
    depends_on:
      - prometheus
    networks:
      - fitness-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Log Aggregation - ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: fitness-tracker-elasticsearch
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      xpack.security.enabled: false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - fitness-network
    restart: unless-stopped
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: fitness-tracker-logstash
    volumes:
      - ./src/deployment/monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
    depends_on:
      - elasticsearch
    networks:
      - fitness-network
    restart: unless-stopped
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: fitness-tracker-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - fitness-network
    restart: unless-stopped
    profiles:
      - logging


volumes:
  backend_prod_logs:
    driver: local
  nginx_prod_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  fitness-network:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 10.0.0.0/16

secrets:
  jwt_secret:
    external: true
  session_secret:
    external: true