# Default values for fitness-tracker
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
app:
  name: fitness-tracker
  environment: production

# Image configuration
image:
  backend:
    repository: fitness-tracker/backend
    tag: "latest"
    pullPolicy: Always
  frontend:
    repository: fitness-tracker/frontend
    tag: "latest"
    pullPolicy: Always
  nginx:
    repository: nginx
    tag: "1.25-alpine"
    pullPolicy: Always

# Service configuration
service:
  backend:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  frontend:
    type: ClusterIP
    port: 80
    targetPort: 80

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: fitness.example.com
      paths:
        - path: /api
          pathType: Prefix
          service: backend
        - path: /
          pathType: Prefix
          service: frontend
  tls:
    - secretName: fitness-tracker-tls
      hosts:
        - fitness.example.com

# Backend deployment configuration
backend:
  replicaCount: 3
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "1000m"
  
  livenessProbe:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Frontend deployment configuration
frontend:
  replicaCount: 2
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
  
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "256Mi"
      cpu: "500m"

  nodeSelector: {}
  tolerations: []
  affinity: {}


# Security configuration
security:
  podSecurityContext:
    fsGroup: 1001
    runAsNonRoot: true
  
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 1001
    capabilities:
      drop:
      - ALL

# Monitoring configuration
monitoring:
  enabled: true
  prometheus:
    enabled: true
    server:
      persistentVolume:
        enabled: true
        size: 10Gi
  
  grafana:
    enabled: true
    admin:
      user: admin
      password: "grafana123"
    persistence:
      enabled: true
      size: 5Gi

# Logging configuration
logging:
  enabled: true
  elasticsearch:
    enabled: false
  fluentd:
    enabled: false

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: 7  # Keep 7 days of backups

# Network policies
networkPolicy:
  enabled: true
  ingress:
    enabled: true
  egress:
    enabled: true

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Environment variables
env:
  NODE_ENV: production
  LOG_LEVEL: info
  CORS_ORIGIN: "https://fitness.example.com"
  JWT_EXPIRES_IN: "24h"
  BCRYPT_ROUNDS: "12"
  RATE_LIMIT_WINDOW: "900000"
  RATE_LIMIT_MAX: "100"

# Secrets (base64 encoded)
secrets:
  jwtSecret: "eW91cl9qd3Rfc2VjcmV0X2hlcmU="
  sessionSecret: "eW91cl9zZXNzaW9uX3NlY3JldF9oZXJl"

# ConfigMaps
configMaps: {}

# Persistent Volumes
persistence:
  accessMode: ReadWriteOnce
  size: 10Gi
  storageClass: ""

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1