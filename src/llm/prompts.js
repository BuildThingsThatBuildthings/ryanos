/**\n * System prompts and prompt templates for LLM workout generation\n * @file prompts.js\n */\n\nclass WorkoutPrompts {\n  /**\n   * Core system prompt that enforces library-only exercises and safety rules\n   */\n  static getSystemPrompt() {\n    return `You are FitnessPro AI, an expert workout programmer and strength coach.\n\nCRITICAL RULES - NEVER VIOLATE THESE:\n\n1. EXERCISE LIBRARY ENFORCEMENT:\n   - You can ONLY use exercises from the user's active exercise library\n   - NEVER suggest exercises not in their library\n   - If you need an exercise not in their library, note it as a suggestion\n   - Always validate exercise IDs against the provided library\n\n2. SAFETY FIRST:\n   - No same heavy movement patterns on consecutive days\n   - Progressive overload caps: ±10-15% volume/load week-over-week\n   - RPE limits: Max 9 RPE for trained individuals, 8 for beginners\n   - Adequate rest periods based on intensity\n   - Consider injury history and limitations\n\n3. WORKOUT STRUCTURE:\n   - Always include warmup and cooldown blocks\n   - Logical exercise ordering (compound → isolation)\n   - Appropriate set/rep schemes for goals\n   - Realistic time estimates\n   - Clear rationale for all decisions\n\n4. PROGRESSION LOGIC:\n   - Base on recent training history\n   - Account for fatigue and recovery status\n   - Implement deload weeks every 4th week\n   - Progressive volume increases\n\n5. OUTPUT FORMAT:\n   - Always use provided function tools for data access\n   - Return structured workout plans as JSON\n   - Include detailed rationale and safety notes\n   - Flag any exercises that would need library addition\n\nYour role is to create safe, effective, personalized workouts that respect the user's constraints and equipment while maximizing training outcomes.`;\n  }\n\n  /**\n   * Prompt for general workout generation\n   */\n  static getWorkoutGenerationPrompt(request) {\n    return `Generate a workout based on the following request:\n\nREQUEST: \"${request}\"\n\nBefore generating the workout, you MUST:\n1. Call get_exercise_library() to see available exercises\n2. Call get_summary_7d() to understand recent training\n3. Call get_equipment_available() to confirm equipment\n4. Call get_user_constraints() to respect limitations\n\nThen create a workout that:\n- Uses ONLY exercises from the user's library\n- Considers recent training load and patterns\n- Respects available equipment\n- Follows safety and progression rules\n- Includes warmup and cooldown\n- Has appropriate intensity and volume\n\nProvide detailed rationale for your programming decisions.\n\nIf you need exercises not in their library, note them as suggestions but DO NOT include them in the workout.`;\n  }\n\n  /**\n   * Prompt for strength-focused workouts\n   */\n  static getStrengthWorkoutPrompt(focus, targetDuration) {\n    return `Create a strength-focused workout with the following parameters:\n\nFOCUS: ${focus}\nTARGET DURATION: ${targetDuration} minutes\n\nSTRENGTH WORKOUT REQUIREMENTS:\n- Emphasize compound movements\n- Rep ranges: 1-8 for max strength, 6-12 for hypertrophy\n- Progressive overload based on recent history\n- Adequate rest periods (2-5 minutes between sets)\n- RPE progression: warmup (5-6) → working sets (7-9)\n\nWORKOUT STRUCTURE:\n1. Dynamic warmup (5-10 mins)\n2. Main strength block (30-45 mins)\n3. Accessory work (10-20 mins) \n4. Cool down (5-10 mins)\n\nFirst gather context with function calls, then design the workout.`;\n  }\n\n  /**\n   * Prompt for conditioning/cardio workouts\n   */\n  static getConditioningWorkoutPrompt(style, intensity) {\n    return `Create a conditioning/cardio workout:\n\nSTYLE: ${style}\nINTENSITY: ${intensity}\n\nCONDITIONING REQUIREMENTS:\n- Match intensity to user's fitness level\n- Include work:rest ratios appropriate for energy system\n- Scale complexity based on experience\n- Monitor total training stress\n\nINTENSITY GUIDELINES:\n- Low: 60-70% max HR, longer duration\n- Moderate: 70-80% max HR, interval work\n- High: 80-90%+ max HR, short intervals\n\nStructure appropriately for the requested style and gather user context first.`;\n  }\n\n  /**\n   * Prompt for recovery/deload workouts\n   */\n  static getRecoveryWorkoutPrompt() {\n    return `Create a recovery-focused workout for active rest:\n\nRECOVERY WORKOUT GOALS:\n- Promote blood flow and mobility\n- Reduce training stress\n- Maintain movement quality\n- Address imbalances\n\nGUIDELINES:\n- RPE should stay 4-6 (easy to moderate)\n- Emphasize mobility and stability\n- Lower volume than normal training\n- Focus on movement quality over intensity\n- Include breathing and relaxation elements\n\nCheck recent training load to ensure this is appropriately programmed.`;\n  }\n\n  /**\n   * Prompt for workout modification/adjustment\n   */\n  static getWorkoutModificationPrompt(originalWorkout, modifications) {\n    return `Modify an existing workout plan:\n\nORIGINAL WORKOUT: ${JSON.stringify(originalWorkout, null, 2)}\n\nREQUESTED MODIFICATIONS:\n${modifications}\n\nMODIFICATION RULES:\n- Maintain workout integrity and balance\n- Respect exercise library constraints\n- Adjust difficulty appropriately\n- Keep safety principles intact\n- Update rationale for changes\n\nProvide the modified workout with explanation of changes made.`;\n  }\n\n  /**\n   * Prompt for exercise substitution when library constraints are hit\n   */\n  static getExerciseSubstitutionPrompt(targetExercise, muscleGroups, equipment) {\n    return `Find exercise substitutions from the user's library:\n\nTARGET EXERCISE: ${targetExercise}\nTARGET MUSCLE GROUPS: ${muscleGroups.join(', ')}\nAVAILABLE EQUIPMENT: ${equipment.join(', ')}\n\nSUBSTITUTION CRITERIA:\n- Must work same primary muscle groups\n- Must use available equipment\n- Must exist in user's exercise library\n- Similar movement pattern preferred\n- Appropriate difficulty level\n\nFirst check the exercise library, then recommend the best substitutions with rationale.`;\n  }\n\n  /**\n   * Prompt for analyzing workout feasibility\n   */\n  static getFeasibilityAnalysisPrompt(workoutRequest) {\n    return `Analyze the feasibility of this workout request:\n\nREQUEST: \"${workoutRequest}\"\n\nANALYSIS POINTS:\n1. Exercise library coverage for requested movements\n2. Equipment requirements vs. availability\n3. Time constraints vs. workout scope\n4. Intensity demands vs. recent training load\n5. User experience level vs. complexity\n6. Safety considerations\n\nProvide a detailed feasibility assessment before attempting to create the workout.\nIf not fully feasible, suggest modifications to make it work.`;\n  }\n\n  /**\n   * Prompt for progressive workout planning (multiple sessions)\n   */\n  static getProgressivePlanningPrompt(numberOfWorkouts, timeframe, goals) {\n    return `Create a progressive workout plan:\n\nNUMBER OF WORKOUTS: ${numberOfWorkouts}\nTIMEFRAME: ${timeframe}\nGOALS: ${goals.join(', ')}\n\nPROGRESSION PRINCIPLES:\n- Gradual volume increases (5-10% per week)\n- Intensity variations (hard/medium/easy days)\n- Movement pattern distribution\n- Recovery considerations\n- Deload programming every 4th week\n\nPlan should show clear progression while respecting:\n- Exercise library limitations\n- Equipment constraints\n- User fitness level\n- Safety guidelines\n\nGenerate one workout at a time but explain the overall progression strategy.`;\n  }\n\n  /**\n   * Get context gathering prompts for LLM tools\n   */\n  static getContextGatheringPrompts() {\n    return {\n      library: \"Analyze the user's exercise library for coverage and gaps\",\n      history: \"Assess recent training patterns and recovery status\", \n      equipment: \"Evaluate equipment constraints and capabilities\",\n      constraints: \"Review user limitations and preferences\"\n    };\n  }\n\n  /**\n   * Generate safety reminder prompt\n   */\n  static getSafetyReminderPrompt(userLevel, injuries = []) {\n    let prompt = `\\nSAFETY REMINDERS for ${userLevel} level user:\\n\\n`;\n    \n    switch (userLevel) {\n      case 'beginner':\n        prompt += `- Max RPE: 8 (leave 2 reps in reserve)\n- Focus on form over load\n- Conservative progression (5-10% increases)\n- More rest days between sessions\n- Emphasize movement quality`;\n        break;\n      case 'intermediate':\n        prompt += `- Max RPE: 9 (leave 1 rep in reserve) \n- Moderate progression (10-15% increases)\n- Periodize intensity\n- Monitor accumulated fatigue\n- Include deload weeks`;\n        break;\n      case 'advanced':\n        prompt += `- Max RPE: 9-10 (occasionally to failure)\n- Aggressive progression when warranted\n- Complex periodization\n- High training frequency tolerance\n- Advanced recovery monitoring`;\n        break;\n    }\n    \n    if (injuries.length > 0) {\n      prompt += `\\n\\nINJURY CONSIDERATIONS:\\n`;\n      injuries.forEach(injury => {\n        prompt += `- ${injury.type}: Avoid/modify ${injury.limitations}\\n`;\n      });\n    }\n    \n    return prompt;\n  }\n\n  /**\n   * Generate equipment-specific guidance\n   */\n  static getEquipmentGuidancePrompt(availableEquipment) {\n    let guidance = `\\nEQUIPMENT-SPECIFIC PROGRAMMING:\\n\\n`;\n    \n    if (availableEquipment.includes('barbell')) {\n      guidance += `- Barbell: Prioritize compound movements (squat, deadlift, press)\\n`;\n    }\n    \n    if (availableEquipment.includes('dumbbells')) {\n      guidance += `- Dumbbells: Unilateral work, stabilization challenges\\n`;\n    }\n    \n    if (availableEquipment.includes('bodyweight')) {\n      guidance += `- Bodyweight: Progress through leverage, range, tempo\\n`;\n    }\n    \n    if (availableEquipment.includes('resistance_bands')) {\n      guidance += `- Bands: Accommodating resistance, activation work\\n`;\n    }\n    \n    if (availableEquipment.length === 1 && availableEquipment[0] === 'bodyweight') {\n      guidance += `\\nBODYWEIGHT-ONLY FOCUS:\\n- Creative progression methods\\n- Isometric holds\\n- Plyometric variations\\n- High-rep endurance work`;\n    }\n    \n    return guidance;\n  }\n\n  /**\n   * Generate time-specific programming guidance\n   */\n  static getTimeGuidancePrompt(duration) {\n    if (duration <= 30) {\n      return `\\nTIME-EFFICIENT PROGRAMMING (${duration} mins):\\n- Compound movements only\\n- Supersets/circuits\\n- Minimal rest periods\\n- High-intensity focus\\n- Skip isolation work`;\n    } else if (duration <= 60) {\n      return `\\nSTANDARD WORKOUT (${duration} mins):\\n- 2-3 main exercises\\n- 1-2 accessory movements\\n- Standard rest periods\\n- Balanced intensity\\n- Include warmup/cooldown`;\n    } else {\n      return `\\nEXTENDED WORKOUT (${duration} mins):\\n- Multiple training blocks\\n- Volume emphasis\\n- Varied intensities\\n- Extensive accessory work\\n- Mobility/recovery focus`;\n    }\n  }\n}\n\nmodule.exports = { WorkoutPrompts };"