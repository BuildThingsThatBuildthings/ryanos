/**\n * Usage examples for the LLM workout generation system\n * @file usage-examples.js\n */\n\nconst { initializeLLMSystem, generateWorkout } = require('../index');\nconst knex = require('knex'); // Assuming Knex.js for database\n\n// Example database configuration (adjust for your setup)\nconst db = knex({\n  client: 'postgresql',\n  connection: {\n    host: process.env.DB_HOST || 'localhost',\n    user: process.env.DB_USER || 'postgres',\n    password: process.env.DB_PASSWORD || 'password',\n    database: process.env.DB_NAME || 'fitness_tracker'\n  }\n});\n\n// Example 1: Basic Workout Generation\nasync function basicWorkoutGeneration() {\n  console.log('=== Example 1: Basic Workout Generation ===');\n  \n  try {\n    const result = await generateWorkout(\n      db,\n      'user-123',\n      'Create a 45-minute upper body strength workout focusing on bench press and rows'\n    );\n    \n    if (result.success) {\n      console.log('✅ Workout generated successfully!');\n      console.log('Workout ID:', result.workout_id);\n      console.log('Estimated Duration:', result.workout_plan.estimated_duration, 'minutes');\n      console.log('Overall RPE Target:', result.workout_plan.overall_rpe_target);\n      console.log('Number of blocks:', result.workout_plan.blocks.length);\n      \n      // Show block summary\n      result.workout_plan.blocks.forEach((block, index) => {\n        console.log(`  Block ${index + 1}: ${block.name} (${block.type}) - ${block.exercises.length} exercises`);\n      });\n      \n      console.log('\\nRationale:', result.rationale);\n      \n      if (result.validation_result.warnings.length > 0) {\n        console.log('\\n⚠️ Warnings:');\n        result.validation_result.warnings.forEach(warning => {\n          console.log(`  - ${warning}`);\n        });\n      }\n      \n    } else {\n      console.log('❌ Workout generation failed:', result.error);\n      \n      if (result.validation_errors) {\n        console.log('Validation errors:', result.validation_errors);\n      }\n      \n      if (result.exercise_suggestions && result.exercise_suggestions.length > 0) {\n        console.log('\\n💡 Exercise suggestions to add to your library:');\n        result.exercise_suggestions.forEach(suggestion => {\n          console.log(`  - ${suggestion.suggested_name}: ${suggestion.reason}`);\n        });\n      }\n    }\n    \n  } catch (error) {\n    console.error('Error generating workout:', error.message);\n  }\n}\n\n// Example 2: Advanced Workout Generation with Options\nasync function advancedWorkoutGeneration() {\n  console.log('\\n=== Example 2: Advanced Workout Generation ===');\n  \n  try {\n    const system = initializeLLMSystem(db, {\n      model: 'gpt-4-turbo',\n      temperature: 0.05, // Very low temperature for consistency\n      maxTokens: 5000\n    });\n    \n    const result = await system.generateWorkout(\n      'user-456', \n      'Design a high-intensity metabolic conditioning workout using kettlebells and bodyweight exercises for 30 minutes',\n      {\n        target_duration: 30,\n        progression_rate: 0.05, // Conservative 5% progression\n        focus_areas: ['conditioning', 'fat_loss'],\n        exclude_patterns: ['heavy_squats'] // User has knee issue\n      }\n    );\n    \n    if (result.success) {\n      console.log('✅ Advanced workout generated!');\n      console.log('Confidence Score:', result.confidence_score);\n      console.log('Generation Time:', result.generation_metadata.generation_time, 'ms');\n      console.log('Tokens Used:', result.generation_metadata.total_tokens);\n      \n      // Show equipment requirements\n      console.log('\\nEquipment Required:');\n      result.workout_plan.equipment_required.forEach(equipment => {\n        console.log(`  - ${equipment}`);\n      });\n      \n      // Show safety notes\n      if (result.workout_plan.safety_notes.length > 0) {\n        console.log('\\n🛡️ Safety Notes:');\n        result.workout_plan.safety_notes.forEach(note => {\n          console.log(`  - ${note}`);\n        });\n      }\n      \n    } else {\n      console.log('❌ Failed:', result.error);\n    }\n    \n  } catch (error) {\n    console.error('Error in advanced generation:', error.message);\n  }\n}\n\n// Example 3: Handling Exercise Suggestions\nasync function handleExerciseSuggestions() {\n  console.log('\\n=== Example 3: Exercise Suggestion Management ===');\n  \n  try {\n    const system = initializeLLMSystem(db);\n    \n    // First, try to generate a workout that might need new exercises\n    const result = await system.generateWorkout(\n      'user-789',\n      'Create an Olympic lifting workout with clean and jerk, snatch variations'\n    );\n    \n    if (!result.success && result.exercise_suggestions) {\n      console.log('Workout generation failed, but we got exercise suggestions!');\n      \n      // Process the suggestions\n      const suggestionResult = await system.processSuggestions(\n        'user-789',\n        result.exercise_suggestions\n      );\n      \n      console.log('\\n📋 Suggestion Processing Results:');\n      console.log('Total suggestions:', suggestionResult.total_suggestions);\n      console.log('Auto-approved:', suggestionResult.auto_approved.length);\n      console.log('Pending approval:', suggestionResult.pending_approval.length);\n      console.log('Duplicates found:', suggestionResult.duplicates_found.length);\n      \n      // Show auto-approved exercises\n      if (suggestionResult.auto_approved.length > 0) {\n        console.log('\\n✅ Auto-approved exercises added to library:');\n        suggestionResult.auto_approved.forEach(exercise => {\n          console.log(`  - ${exercise.suggested_name}`);\n        });\n      }\n      \n      // Show pending exercises\n      if (suggestionResult.pending_approval.length > 0) {\n        console.log('\\n⏳ Exercises pending manual approval:');\n        suggestionResult.pending_approval.forEach(exercise => {\n          console.log(`  - ${exercise.suggested_name}: ${exercise.reason}`);\n        });\n        \n        // Example: Approve the first pending suggestion\n        const firstPending = suggestionResult.pending_approval[0];\n        if (firstPending) {\n          console.log('\\n✅ Approving first suggestion...');\n          \n          const approvalResult = await system.suggestionSystem.approveSuggestion(\n            'user-789',\n            firstPending.id,\n            {\n              name: firstPending.suggested_name,\n              description: 'User-approved Olympic lift',\n              difficulty_level: 'advanced',\n              instructions: 'Complex movement requiring proper coaching',\n              approval_notes: 'Approved for experienced lifter'\n            }\n          );\n          \n          console.log('Exercise approved and added to library!');\n          console.log('New exercise ID:', approvalResult.exercise_id);\n        }\n      }\n    }\n    \n  } catch (error) {\n    console.error('Error handling suggestions:', error.message);\n  }\n}\n\n// Example 4: Workout Validation\nasync function workoutValidation() {\n  console.log('\\n=== Example 4: Standalone Workout Validation ===');\n  \n  // Sample workout plan to validate\n  const workoutPlan = {\n    id: 'test-workout-001',\n    name: 'Test Upper Body Workout',\n    description: 'Quick upper body session',\n    blocks: [\n      {\n        type: 'strength',\n        name: 'Main Block',\n        exercises: [\n          {\n            exercise_id: 'ex-001',\n            exercise_name: 'Bench Press',\n            order: 1,\n            sets: [\n              { set_number: 1, reps: 5, weight: 100, rest_seconds: 180, rpe: 8 },\n              { set_number: 2, reps: 5, weight: 100, rest_seconds: 180, rpe: 9 },\n              { set_number: 3, reps: 5, weight: 105, rest_seconds: 180, rpe: 9.5 }\n            ],\n            rest_between_exercises: 300\n          }\n        ],\n        time_cap_minutes: 30\n      }\n    ],\n    estimated_duration: 35,\n    workout_type: 'strength',\n    focus: 'upper_body',\n    overall_rpe_target: 8.5,\n    equipment_required: ['barbell', 'bench'],\n    rationale: 'Focused strength work',\n    safety_notes: ['Use spotter for heavy sets']\n  };\n  \n  try {\n    const system = initializeLLMSystem(db);\n    \n    // Get user context for validation\n    const [exerciseLibrary, history, constraints] = await Promise.all([\n      system.tools.get_exercise_library('user-123'),\n      system.tools.get_summary_14d('user-123'),\n      system.tools.get_user_constraints('user-123')\n    ]);\n    \n    // Validate the workout\n    const validationResult = system.validator.validateWorkoutPlan(\n      workoutPlan,\n      exerciseLibrary.exercises,\n      history,\n      constraints\n    );\n    \n    console.log('\\n📊 Validation Results:');\n    console.log('Is valid:', validationResult.is_valid);\n    console.log('Errors:', validationResult.errors.length);\n    console.log('Warnings:', validationResult.warnings.length);\n    console.log('Suggestions:', validationResult.suggestions.length);\n    \n    if (validationResult.errors.length > 0) {\n      console.log('\\n❌ Validation Errors:');\n      validationResult.errors.forEach(error => {\n        console.log(`  - ${error}`);\n      });\n    }\n    \n    if (validationResult.warnings.length > 0) {\n      console.log('\\n⚠️ Validation Warnings:');\n      validationResult.warnings.forEach(warning => {\n        console.log(`  - ${warning}`);\n      });\n    }\n    \n  } catch (error) {\n    console.error('Error in validation:', error.message);\n  }\n}\n\n// Example 5: Safety Rule Checking\nasync function safetyRuleChecking() {\n  console.log('\\n=== Example 5: Safety Rule Checking ===');\n  \n  try {\n    const system = initializeLLMSystem(db);\n    \n    // Mock workout plan with potentially unsafe characteristics\n    const unsafeWorkout = {\n      id: 'unsafe-workout',\n      name: 'High Risk Workout',\n      blocks: [\n        {\n          type: 'strength',\n          name: 'Heavy Block',\n          exercises: [\n            {\n              exercise_id: 'ex-squat',\n              exercise_name: 'Back Squat',\n              order: 1,\n              sets: [\n                { set_number: 1, reps: 3, weight: 150, rest_seconds: 180, rpe: 9.5 },\n                { set_number: 2, reps: 3, weight: 155, rest_seconds: 180, rpe: 10 },\n                { set_number: 3, reps: 3, weight: 160, rest_seconds: 180, rpe: 10 }\n              ],\n              rest_between_exercises: 300\n            }\n          ],\n          time_cap_minutes: 45\n        }\n      ],\n      estimated_duration: 50,\n      workout_type: 'strength',\n      focus: 'legs',\n      overall_rpe_target: 9.8, // Very high RPE\n      equipment_required: ['barbell', 'squat_rack'],\n      rationale: 'Max effort testing',\n      safety_notes: []\n    };\n    \n    // Mock recent training history with high load\n    const recentHistory = [\n      {\n        date: '2024-01-14',\n        focus: 'legs',\n        overall_rpe: 9.0,\n        total_volume_kg: 3500,\n        duration_minutes: 75\n      },\n      {\n        date: '2024-01-13',\n        focus: 'legs',\n        overall_rpe: 8.5,\n        total_volume_kg: 3200,\n        duration_minutes: 70\n      }\n    ];\n    \n    const userProfile = {\n      fitness_level: 'intermediate',\n      injury_considerations: [\n        { type: 'lower_back', limitations: 'avoid_heavy_squats' }\n      ]\n    };\n    \n    // Check safety\n    const safetyResult = system.safetyEngine.validateWorkoutSafety(\n      unsafeWorkout,\n      recentHistory,\n      userProfile\n    );\n    \n    console.log('\\n🛡️ Safety Check Results:');\n    console.log('Is safe:', safetyResult.is_safe);\n    console.log('Safety rating:', safetyResult.safety_rating);\n    console.log('Requires deload:', safetyResult.requires_deload);\n    \n    if (safetyResult.violations.length > 0) {\n      console.log('\\n🚫 Safety Violations:');\n      safetyResult.violations.forEach(violation => {\n        console.log(`  - ${violation.type}: ${JSON.stringify(violation)}`);\n      });\n    }\n    \n    if (safetyResult.warnings.length > 0) {\n      console.log('\\n⚠️ Safety Warnings:');\n      safetyResult.warnings.forEach(warning => {\n        console.log(`  - ${warning.type}`);\n      });\n    }\n    \n    if (safetyResult.recommendations.length > 0) {\n      console.log('\\n💡 Safety Recommendations:');\n      safetyResult.recommendations.forEach(rec => {\n        console.log(`  - ${rec.type}: ${rec.message}`);\n      });\n    }\n    \n    if (safetyResult.suggested_modifications.length > 0) {\n      console.log('\\n🔧 Suggested Modifications:');\n      safetyResult.suggested_modifications.forEach(mod => {\n        console.log(`  - ${mod.type}: ${mod.reason || 'Safety improvement'}`);\n      });\n    }\n    \n  } catch (error) {\n    console.error('Error in safety checking:', error.message);\n  }\n}\n\n// Example 6: Getting Suggestion Analytics\nasync function suggestionAnalytics() {\n  console.log('\\n=== Example 6: Exercise Suggestion Analytics ===');\n  \n  try {\n    const system = initializeLLMSystem(db);\n    \n    const analytics = await system.suggestionSystem.getSuggestionAnalytics('user-123');\n    \n    console.log('\\n📈 Suggestion Analytics:');\n    console.log('Total suggestions:', analytics.total_suggestions);\n    console.log('Pending:', analytics.pending_count);\n    console.log('Approved:', analytics.approved_count);\n    console.log('Auto-approved:', analytics.auto_approved_count);\n    console.log('Rejected:', analytics.rejected_count);\n    console.log('Approval rate:', analytics.approval_rate + '%');\n    \n    if (analytics.category_breakdown.length > 0) {\n      console.log('\\n📊 By Category:');\n      analytics.category_breakdown.forEach(cat => {\n        console.log(`  - ${cat.category}: ${cat.count}`);\n      });\n    }\n    \n    if (analytics.recent_suggestions.length > 0) {\n      console.log('\\n🕒 Recent Suggestions:');\n      analytics.recent_suggestions.slice(0, 5).forEach(suggestion => {\n        console.log(`  - ${suggestion.suggested_name} (${suggestion.status})`);\n      });\n    }\n    \n  } catch (error) {\n    console.error('Error getting analytics:', error.message);\n  }\n}\n\n// Example 7: Batch Workout Generation\nasync function batchWorkoutGeneration() {\n  console.log('\\n=== Example 7: Batch Workout Generation ===');\n  \n  const workoutRequests = [\n    {\n      userId: 'user-123',\n      request: 'Upper body push focus workout',\n      options: { target_duration: 45 }\n    },\n    {\n      userId: 'user-123',\n      request: 'Lower body strength and power',\n      options: { target_duration: 60 }\n    },\n    {\n      userId: 'user-123',\n      request: 'Active recovery and mobility',\n      options: { target_duration: 30 }\n    }\n  ];\n  \n  try {\n    const system = initializeLLMSystem(db);\n    const results = [];\n    \n    console.log('Generating multiple workouts...');\n    \n    for (const [index, workoutRequest] of workoutRequests.entries()) {\n      console.log(`\\nGenerating workout ${index + 1}/3: ${workoutRequest.request}`);\n      \n      try {\n        const result = await system.generateWorkout(\n          workoutRequest.userId,\n          workoutRequest.request,\n          workoutRequest.options\n        );\n        \n        results.push({\n          index: index + 1,\n          success: result.success,\n          workoutId: result.workout_id,\n          duration: result.workout_plan?.estimated_duration,\n          error: result.error\n        });\n        \n        if (result.success) {\n          console.log(`  ✅ Success: ${result.workout_plan.name} (${result.workout_plan.estimated_duration}min)`);\n        } else {\n          console.log(`  ❌ Failed: ${result.error}`);\n        }\n        \n      } catch (error) {\n        console.log(`  ❌ Error: ${error.message}`);\n        results.push({\n          index: index + 1,\n          success: false,\n          error: error.message\n        });\n      }\n    }\n    \n    // Summary\n    const successful = results.filter(r => r.success).length;\n    console.log(`\\n📋 Batch Summary: ${successful}/${results.length} workouts generated successfully`);\n    \n  } catch (error) {\n    console.error('Error in batch generation:', error.message);\n  }\n}\n\n// Main execution function\nasync function runExamples() {\n  console.log('🏋️ LLM Workout Generation System - Usage Examples\\n');\n  \n  // Set up environment variable for OpenAI\n  if (!process.env.OPENAI_API_KEY) {\n    console.log('⚠️ Warning: OPENAI_API_KEY environment variable not set');\n    console.log('Please set your OpenAI API key to run these examples\\n');\n    return;\n  }\n  \n  try {\n    // Run all examples\n    await basicWorkoutGeneration();\n    await advancedWorkoutGeneration();\n    await handleExerciseSuggestions();\n    await workoutValidation();\n    await safetyRuleChecking();\n    await suggestionAnalytics();\n    await batchWorkoutGeneration();\n    \n    console.log('\\n✅ All examples completed!');\n    \n  } catch (error) {\n    console.error('Error running examples:', error.message);\n  } finally {\n    // Clean up database connection\n    await db.destroy();\n  }\n}\n\n// Error handling for unhandled promises\nprocess.on('unhandledRejection', (error) => {\n  console.error('Unhandled promise rejection:', error.message);\n  process.exit(1);\n});\n\nmodule.exports = {\n  runExamples,\n  basicWorkoutGeneration,\n  advancedWorkoutGeneration,\n  handleExerciseSuggestions,\n  workoutValidation,\n  safetyRuleChecking,\n  suggestionAnalytics,\n  batchWorkoutGeneration\n};\n\n// Run examples if this file is executed directly\nif (require.main === module) {\n  runExamples();\n}"