/**\n * Main entry point for LLM-based workout generation system\n * @file index.js\n */\n\nconst { WorkoutGenerationService } = require('./workout-generator');\nconst { WorkoutValidator } = require('./validation');\nconst { LLMTools } = require('./llm-tools');\nconst { WorkoutPrompts } = require('./prompts');\nconst { SafetyRulesEngine } = require('./safety-rules');\nconst { ExerciseSuggestionSystem } = require('./suggestion-system');\n\n/**\n * Initialize the LLM workout generation system\n * @param {Object} database - Database connection (Knex instance)\n * @param {Object} options - Configuration options\n * @returns {Object} Initialized system components\n */\nfunction initializeLLMSystem(database, options = {}) {\n  // Validate OpenAI API key\n  if (!process.env.OPENAI_API_KEY) {\n    throw new Error('OPENAI_API_KEY environment variable is required');\n  }\n\n  // Initialize core components\n  const validator = new WorkoutValidator();\n  const tools = new LLMTools(database);\n  const safetyEngine = new SafetyRulesEngine();\n  const suggestionSystem = new ExerciseSuggestionSystem(database);\n  \n  // Initialize main generation service\n  const generationService = new WorkoutGenerationService(database, {\n    model: options.model || 'gpt-4-turbo',\n    maxTokens: options.maxTokens || 4000,\n    temperature: options.temperature || 0.1,\n    timeout: options.timeout || 60000\n  });\n\n  return {\n    // Main service\n    generationService,\n    \n    // Core components\n    validator,\n    tools,\n    safetyEngine,\n    suggestionSystem,\n    prompts: WorkoutPrompts,\n    \n    // Convenience methods\n    generateWorkout: async (userId, request, options = {}) => {\n      return await generationService.generateWorkout(userId, request, options);\n    },\n    \n    validateWorkout: (workoutPlan, exerciseLibrary, history, constraints) => {\n      return validator.validateWorkoutPlan(workoutPlan, exerciseLibrary, history, constraints);\n    },\n    \n    processSuggestions: async (userId, suggestions) => {\n      return await suggestionSystem.processSuggestions(userId, suggestions);\n    },\n    \n    checkSafety: (workout, history, userProfile) => {\n      return safetyEngine.validateWorkoutSafety(workout, history, userProfile);\n    }\n  };\n}\n\n/**\n * Create a simplified workout generation function for easy integration\n * @param {Object} database - Database connection\n * @param {string} userId - User identifier\n * @param {string} request - Workout request\n * @param {Object} options - Generation options\n * @returns {Promise<Object>} Generated workout result\n */\nasync function generateWorkout(database, userId, request, options = {}) {\n  const system = initializeLLMSystem(database, options);\n  return await system.generateWorkout(userId, request, options);\n}\n\n/**\n * Validate an existing workout plan\n * @param {Object} database - Database connection\n * @param {string} userId - User identifier\n * @param {Object} workoutPlan - Workout plan to validate\n * @returns {Promise<Object>} Validation results\n */\nasync function validateWorkout(database, userId, workoutPlan) {\n  const system = initializeLLMSystem(database);\n  \n  // Get user context for validation\n  const [exerciseLibrary, history, constraints] = await Promise.all([\n    system.tools.get_exercise_library(userId),\n    system.tools.get_summary_14d(userId),\n    system.tools.get_user_constraints(userId)\n  ]);\n  \n  return system.validator.validateWorkoutPlan(\n    workoutPlan,\n    exerciseLibrary.exercises,\n    history,\n    constraints\n  );\n}\n\n/**\n * Check workout safety\n * @param {Object} database - Database connection\n * @param {string} userId - User identifier\n * @param {Object} workoutPlan - Workout plan to check\n * @returns {Promise<Object>} Safety check results\n */\nasync function checkWorkoutSafety(database, userId, workoutPlan) {\n  const system = initializeLLMSystem(database);\n  \n  // Get user context for safety check\n  const [history, constraints] = await Promise.all([\n    system.tools.get_summary_14d(userId),\n    system.tools.get_user_constraints(userId)\n  ]);\n  \n  return system.safetyEngine.validateWorkoutSafety(\n    workoutPlan,\n    history,\n    constraints\n  );\n}\n\n/**\n * Process exercise suggestions from failed workout generations\n * @param {Object} database - Database connection\n * @param {string} userId - User identifier\n * @param {Array} suggestions - Exercise suggestions to process\n * @returns {Promise<Object>} Processing results\n */\nasync function processSuggestions(database, userId, suggestions) {\n  const system = initializeLLMSystem(database);\n  return await system.suggestionSystem.processSuggestions(userId, suggestions);\n}\n\n/**\n * Get user's pending exercise suggestions\n * @param {Object} database - Database connection\n * @param {string} userId - User identifier\n * @returns {Promise<Array>} Pending suggestions\n */\nasync function getPendingSuggestions(database, userId) {\n  const system = initializeLLMSystem(database);\n  return await system.suggestionSystem.getPendingSuggestions(userId);\n}\n\n/**\n * Approve a pending exercise suggestion\n * @param {Object} database - Database connection\n * @param {string} userId - User identifier\n * @param {string} suggestionId - Suggestion to approve\n * @param {Object} additionalData - Additional exercise data\n * @returns {Promise<Object>} Approval result\n */\nasync function approveSuggestion(database, userId, suggestionId, additionalData = {}) {\n  const system = initializeLLMSystem(database);\n  return await system.suggestionSystem.approveSuggestion(userId, suggestionId, additionalData);\n}\n\n/**\n * Reject a pending exercise suggestion\n * @param {Object} database - Database connection\n * @param {string} userId - User identifier\n * @param {string} suggestionId - Suggestion to reject\n * @param {string} reason - Rejection reason\n * @returns {Promise<Object>} Rejection result\n */\nasync function rejectSuggestion(database, userId, suggestionId, reason) {\n  const system = initializeLLMSystem(database);\n  return await system.suggestionSystem.rejectSuggestion(userId, suggestionId, reason);\n}\n\n/**\n * Get analytics about user's exercise suggestions\n * @param {Object} database - Database connection\n * @param {string} userId - User identifier\n * @returns {Promise<Object>} Suggestion analytics\n */\nasync function getSuggestionAnalytics(database, userId) {\n  const system = initializeLLMSystem(database);\n  return await system.suggestionSystem.getSuggestionAnalytics(userId);\n}\n\n// Export all components and convenience functions\nmodule.exports = {\n  // Initialization\n  initializeLLMSystem,\n  \n  // Main components\n  WorkoutGenerationService,\n  WorkoutValidator,\n  LLMTools,\n  WorkoutPrompts,\n  SafetyRulesEngine,\n  ExerciseSuggestionSystem,\n  \n  // Convenience functions\n  generateWorkout,\n  validateWorkout,\n  checkWorkoutSafety,\n  processSuggestions,\n  getPendingSuggestions,\n  approveSuggestion,\n  rejectSuggestion,\n  getSuggestionAnalytics\n};"